# -*- coding: utf-8 -*-
"""
Created on Wed Jul  1 12:31:32 2020

@author: Harold Murcia and Sebastian_Tilaguy
"""
import pandas as pd
import numpy as np
import os, sys, warnings
import matplotlib.pyplot as plt
from math import sqrt
from sklearn.metrics import r2_score

path=os.path.dirname(os.getcwd())

filename_reference = path+"/data/Processed_data_groundTruth.csv"
df_ref = pd.read_csv(filename_reference,sep=',')
filename_alphaRover = path+'/data/Processed_data_alphaRover.csv'
df_alphaRover = pd.read_csv(filename_alphaRover,sep=',')
print('Universidad de Ibagué - D+TEC - www.haroldmurcia.com\n'+
'3D CROP - alphaVersion [Linux powered]')
print("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n")
################################################################################

def ascii_art():
    print('=============================================================')
    print(' Universidad de Ibagué - D+TEC - www.haroldmurcia.com\n'+
    ' 3D CROP - alphaVersion [Linux powered] - www.haroldmurcia.com\n')
    print('=============================================================')

def RMSE_error(error):
    n=len(error)
    rmse = sqrt(np.sum( np.power(error,2)/n ))
    return rmse

def RMSPE_error(Reference, Real):
    Reference = np.array(Reference)
    Real = np.array(Real)
    error= (Reference - Real)/Reference
    rmspe= RMSE_error(error)
    return rmspe

def Ee_avg_error(Reference, Real):
    Reference = np.array(Reference)
    Real = np.array(Real)
    error= abs(Reference - Real)/Reference
    avg_error = np.mean(error)
    return avg_error

def MAE_error(Reference, Real):
    Reference = np.array(Reference)
    Real = np.array(Real)
    error= abs(Reference - Real)
    avg_error = np.mean(error)
    return avg_error

def MBE_error(Reference, Real):
    Reference = np.array(Reference)
    Real = np.array(Real)
    error= np.mean(Reference - Real)
    return error

def R__2(Reference, Real):
    Reference = np.array(Reference)
    Real = np.array(Real)
    #correlation_matrix = np.corrcoef(Reference, Real)
    #correlation_xy = correlation_matrix[0,1]
    r_2 = np.cov(Reference,Real)/(np.var(Reference)*np.var(Real))
    r_2 = r2_score(Reference,Real)
    return r_2

if __name__ == "__main__":
    os.system('clear')
    ascii_art()
    # Data testing
    # Adjustment by grooves and correction of the Y-mirror generated by the LiDAR.
    N_ref = len(df_ref)
    N_alphaRover = len(df_alphaRover)
    if N_ref != N_alphaRover:
        print("The number of plants must be the same in the reference and alphaRover data.")
        exit()
    N_grooves = len(df_ref[df_ref['D_groove']>0]) + 1.0
    Trees_per_groove = int(N_ref/N_grooves)

    print("CROP:\n","\tNumber of grooves=",N_grooves,"\n","\tNumber of trees per groove=",Trees_per_groove)

    df_ref_groove_A = df_ref.iloc[0:Trees_per_groove]
    df_ref_groove_B = df_ref.iloc[Trees_per_groove:]

    df_alphaRover_groove_A = df_alphaRover.iloc[0:Trees_per_groove]
    df_alphaRover_groove_B = df_alphaRover.iloc[Trees_per_groove:]

    # Hc, Canopy height -ERROR
    Hc_RMSE_1 = RMSE_error(df_ref_groove_A['high'].values - df_alphaRover_groove_B['high'].values)
    Hc_Ee_1 = 100*Ee_avg_error(df_ref_groove_A['high'].values, df_alphaRover_groove_B['high'].values)
    Hc_RMSE_2 = RMSE_error(df_ref_groove_B['high'].values - df_alphaRover_groove_A['high'].values)
    Hc_Ee_2 = 100*Ee_avg_error(df_ref_groove_B['high'].values, df_alphaRover_groove_A['high'].values)
    Hc_RMSPE_1 = 100*RMSE_error(df_ref_groove_A['high'].values - df_alphaRover_groove_B['high'].values)
    Hc_RMSPE_2 = 100*RMSE_error(df_ref_groove_B['high'].values - df_alphaRover_groove_A['high'].values)
    Hc_MAE_1 = MAE_error(df_ref_groove_A['high'].values, df_alphaRover_groove_B['high'].values)
    Hc_MAE_2 = MAE_error(df_ref_groove_B['high'].values, df_alphaRover_groove_A['high'].values)
    Hc_MBE_1 = MBE_error(df_ref_groove_A['high'].values, df_alphaRover_groove_B['high'].values)
    Hc_MBE_2 = MBE_error(df_ref_groove_B['high'].values, df_alphaRover_groove_A['high'].values)
    Hc_r2_1 = R__2(df_ref_groove_A['high'].values, df_alphaRover_groove_B['high'].values)
    Hc_r2_2 = R__2(df_ref_groove_B['high'].values, df_alphaRover_groove_A['high'].values)

    # Dc, Canopy diameter - ERROR
    Dc_RMSE_1 = RMSE_error(df_ref_groove_A['Diameter'].values - df_alphaRover_groove_B['Diameter'].values)
    Dc_Ee_1 = 100*Ee_avg_error(df_ref_groove_A['Diameter'].values, df_alphaRover_groove_B['Diameter'].values)
    Dc_RMSE_2 = RMSE_error(df_ref_groove_B['Diameter'].values - df_alphaRover_groove_A['Diameter'].values)
    Dc_Ee_2 = 100*Ee_avg_error(df_ref_groove_B['Diameter'].values, df_alphaRover_groove_A['Diameter'].values)
    Dc_r2_1 = R__2(df_ref_groove_A['Diameter'].values, df_alphaRover_groove_B['Diameter'].values)
    Dc_r2_2 = R__2(df_ref_groove_B['Diameter'].values, df_alphaRover_groove_A['Diameter'].values)
    #
    #tree2tree distantce - ERROR
    Dt2t_RMSE_1 = RMSE_error(df_ref['D_tree'].iloc[0:Trees_per_groove-1].values - df_alphaRover['D_tree'].iloc[Trees_per_groove-1:-2].values)
    Dt2t_RMSE_2 = RMSE_error(df_ref['D_tree'].iloc[Trees_per_groove-1:-2].values - df_alphaRover['D_tree'].iloc[0:Trees_per_groove-1].values)
    Dt2t_Ee   = 100*Ee_avg_error(df_ref['D_tree'].iloc[0:-2].values.mean(), df_alphaRover['D_tree'].iloc[0:-2].values.mean())
    Dt2t_r2_1= R__2(df_ref['D_tree'].iloc[0:Trees_per_groove-1].values, df_alphaRover['D_tree'].iloc[Trees_per_groove-1:-2].values)
    Dt2t_r2_2= R__2(df_ref['D_tree'].iloc[Trees_per_groove-1:-2].values, df_alphaRover['D_tree'].iloc[0:Trees_per_groove-1].values)
    #Groove2Groove distantce - ERROR
    g2g_Ee = 100*abs((df_ref['D_groove'].iloc[0] - df_alphaRover['D_groove'].iloc[0]) / df_ref['D_groove'].iloc[0])

    ############################## RESULTS
    print("\n-----------------------------------------------------------")
    print("                RESULTS")
    print("-----------------------------------------------------------")
    print("\tParam","\tEd[%]","\tRMSE[m]","\tR2")
    print("-----------------------------------------------------------")
    d=2 #<--- number of digits
    print(" Canopy Height:")
    print("\tHc","\t",round((Hc_Ee_1+Hc_Ee_2)*0.5,d),"\t",round((Hc_RMSE_1+Hc_RMSE_2)*0.5,d),"\t",round((Hc_r2_1+Hc_r2_2)*0.5,d))
    print(" Canopy Diameter:")
    print("\tDc","\t",round((Dc_Ee_1+Dc_Ee_2)*0.5,d),"\t",round((Dc_RMSE_1+Dc_RMSE_2)*0.5,d),"\t",round(0.5*(Dc_r2_1+Dc_r2_2),d))
    print(" Tree to Tree distance:")
    print("\tt2t","\t",round(Dt2t_Ee,d),"\t",round(0.5*(Dt2t_RMSE_1+Dt2t_RMSE_2),d))
    print(" Groove to Tree Groove:")
    print("\tg2g","\t",round(g2g_Ee,d))
    print("-----------------------------------------------------------\n")
